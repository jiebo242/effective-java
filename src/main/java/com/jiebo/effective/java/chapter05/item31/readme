这一节主要讲的是通配符的一个使用，提升API的灵活性
一句话：使用通配符的原因，就是比参数化类型的泛型更具灵活性(而使用泛型的原因，是因为比原生态类型更加安全)
1.有限制的通配符：<? extends E> <? super E>
2.无限制的通配符：<?>
3.灵活性的提升主要是相比于：参数化类型的不变性(List<String>既不是List<Object>的子类型，也不是它的超类型)
4.通配符主要是用于参数定义时，而不要用通配符类型作为返回类型
5.为了获得最大限度的灵活性，要在表示生产者或消费者的输入参数上使用通配符

Q1：那使用哪种通配符类型？
PECS：producer-extends consumer-super(生产/put/放的时候用子类，消费/get/取的时候用超类)
还要记住所有的comparable和comparator都是消费者，都应使用super，详见例子RecursiveTypeBound
Q2：使用无限制的类型参数还是无限制的通配符呢？
在公共API中，使用无限制的通配符更好一些，因为它更简单。
一般来说，如果参数类型只在方法声明中出现一次(也就是方法体里面没用到)，那就可以用通配符取代它，如果是无限制的类型参数，就用无限制的通配符取代它，如果是有限制的类型参数，那就用有限制的通配符类型取代它(也就是<E>对应<?>，<E extends Number>对应<? extends Number>)
在使用无限制通配符类型时，可能需要编写一个私有的辅助方法来捕捉通配符类型，而这个辅助方法拥有的签名，正是我们在公有方法中因为它过于复杂而抛弃的，这种使用详见例子Swap